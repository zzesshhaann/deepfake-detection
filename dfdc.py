# -*- coding: utf-8 -*-
"""dfdc.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ePfluDse6CUmHUgCakx1fCsdw7ibHYbF
"""

import streamlit as st
import cv2
import numpy as np
import os
import joblib

# Load the model from the saved file
model = joblib.load('/content/drive/MyDrive/dtc.pkl')

# Function to preprocess an input image before making predictions
def preprocess_image(image_path):
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    resized_image = cv2.resize(image, (250, 250))
    flattened_image = resized_image.flatten().reshape(1, -1)
    return flattened_image / 255.0

# Function to make predictions using the loaded model
def make_prediction(image_path):
    preprocessed_image = preprocess_image(image_path)
    prediction = model.predict(preprocessed_image)
    return prediction[0]  # Assuming the model returns a single prediction

# Streamlit app
st.title("Image Classification App")

uploaded_image = st.file_uploader("Upload an image", type=["jpg", "jpeg", "png"])

if uploaded_image is not None:
    # Display the uploaded image
    st.image(uploaded_image, caption="Uploaded Image", use_column_width=True)

    # Make a prediction when a button is clicked
    if st.button("Make Prediction"):
        try:
            # Save the uploaded image temporarily
            temp_image_path = "temp_image.jpg"
            with open(temp_image_path, "wb") as temp_image:
                temp_image.write(uploaded_image.read())

            # Make a prediction
            predicted_class = make_prediction(temp_image_path)

            # Display the prediction result
            if predicted_class == 0:
                st.write("Predicted Class: FAKE")
            elif predicted_class == 1:
                st.write("Predicted Class: REAL")

            # Remove the temporary image file
            os.remove(temp_image_path)
            st.success("Prediction complete.")
        except Exception as e:
            st.error(f"Error: {e}")

